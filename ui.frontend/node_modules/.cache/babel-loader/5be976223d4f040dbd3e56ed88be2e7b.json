{"ast":null,"code":"var toObject = require('../internals/to-object');\n\nvar toLength = require('../internals/to-length');\n\nvar getIterator = require('../internals/get-iterator');\n\nvar getIteratorMethod = require('../internals/get-iterator-method');\n\nvar isArrayIteratorMethod = require('../internals/is-array-iterator-method');\n\nvar bind = require('../internals/function-bind-context');\n\nvar aTypedArrayConstructor = require('../internals/array-buffer-view-core').aTypedArrayConstructor;\n\nmodule.exports = function from(source\n/* , mapfn, thisArg */\n) {\n  var O = toObject(source);\n  var argumentsLength = arguments.length;\n  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;\n  var mapping = mapfn !== undefined;\n  var iteratorMethod = getIteratorMethod(O);\n  var i, length, result, step, iterator, next;\n\n  if (iteratorMethod != undefined && !isArrayIteratorMethod(iteratorMethod)) {\n    iterator = getIterator(O, iteratorMethod);\n    next = iterator.next;\n    O = [];\n\n    while (!(step = next.call(iterator)).done) {\n      O.push(step.value);\n    }\n  }\n\n  if (mapping && argumentsLength > 2) {\n    mapfn = bind(mapfn, arguments[2], 2);\n  }\n\n  length = toLength(O.length);\n  result = new (aTypedArrayConstructor(this))(length);\n\n  for (i = 0; length > i; i++) {\n    result[i] = mapping ? mapfn(O[i], i) : O[i];\n  }\n\n  return result;\n};","map":{"version":3,"sources":["/Users/anele.mzinyati/Documents/repos/aem-react-spa-app/ui.frontend/node_modules/core-js/internals/typed-array-from.js"],"names":["toObject","require","toLength","getIterator","getIteratorMethod","isArrayIteratorMethod","bind","aTypedArrayConstructor","module","exports","from","source","O","argumentsLength","arguments","length","mapfn","undefined","mapping","iteratorMethod","i","result","step","iterator","next","call","done","push","value"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,wBAAD,CAAtB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,wBAAD,CAAtB;;AACA,IAAIE,WAAW,GAAGF,OAAO,CAAC,2BAAD,CAAzB;;AACA,IAAIG,iBAAiB,GAAGH,OAAO,CAAC,kCAAD,CAA/B;;AACA,IAAII,qBAAqB,GAAGJ,OAAO,CAAC,uCAAD,CAAnC;;AACA,IAAIK,IAAI,GAAGL,OAAO,CAAC,oCAAD,CAAlB;;AACA,IAAIM,sBAAsB,GAAGN,OAAO,CAAC,qCAAD,CAAP,CAA+CM,sBAA5E;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,IAAT,CAAcC;AAAO;AAArB,EAA6C;AAC5D,MAAIC,CAAC,GAAGZ,QAAQ,CAACW,MAAD,CAAhB;AACA,MAAIE,eAAe,GAAGC,SAAS,CAACC,MAAhC;AACA,MAAIC,KAAK,GAAGH,eAAe,GAAG,CAAlB,GAAsBC,SAAS,CAAC,CAAD,CAA/B,GAAqCG,SAAjD;AACA,MAAIC,OAAO,GAAGF,KAAK,KAAKC,SAAxB;AACA,MAAIE,cAAc,GAAGf,iBAAiB,CAACQ,CAAD,CAAtC;AACA,MAAIQ,CAAJ,EAAOL,MAAP,EAAeM,MAAf,EAAuBC,IAAvB,EAA6BC,QAA7B,EAAuCC,IAAvC;;AACA,MAAIL,cAAc,IAAIF,SAAlB,IAA+B,CAACZ,qBAAqB,CAACc,cAAD,CAAzD,EAA2E;AACzEI,IAAAA,QAAQ,GAAGpB,WAAW,CAACS,CAAD,EAAIO,cAAJ,CAAtB;AACAK,IAAAA,IAAI,GAAGD,QAAQ,CAACC,IAAhB;AACAZ,IAAAA,CAAC,GAAG,EAAJ;;AACA,WAAO,CAAC,CAACU,IAAI,GAAGE,IAAI,CAACC,IAAL,CAAUF,QAAV,CAAR,EAA6BG,IAArC,EAA2C;AACzCd,MAAAA,CAAC,CAACe,IAAF,CAAOL,IAAI,CAACM,KAAZ;AACD;AACF;;AACD,MAAIV,OAAO,IAAIL,eAAe,GAAG,CAAjC,EAAoC;AAClCG,IAAAA,KAAK,GAAGV,IAAI,CAACU,KAAD,EAAQF,SAAS,CAAC,CAAD,CAAjB,EAAsB,CAAtB,CAAZ;AACD;;AACDC,EAAAA,MAAM,GAAGb,QAAQ,CAACU,CAAC,CAACG,MAAH,CAAjB;AACAM,EAAAA,MAAM,GAAG,KAAKd,sBAAsB,CAAC,IAAD,CAA3B,EAAmCQ,MAAnC,CAAT;;AACA,OAAKK,CAAC,GAAG,CAAT,EAAYL,MAAM,GAAGK,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BC,IAAAA,MAAM,CAACD,CAAD,CAAN,GAAYF,OAAO,GAAGF,KAAK,CAACJ,CAAC,CAACQ,CAAD,CAAF,EAAOA,CAAP,CAAR,GAAoBR,CAAC,CAACQ,CAAD,CAAxC;AACD;;AACD,SAAOC,MAAP;AACD,CAxBD","sourcesContent":["var toObject = require('../internals/to-object');\nvar toLength = require('../internals/to-length');\nvar getIterator = require('../internals/get-iterator');\nvar getIteratorMethod = require('../internals/get-iterator-method');\nvar isArrayIteratorMethod = require('../internals/is-array-iterator-method');\nvar bind = require('../internals/function-bind-context');\nvar aTypedArrayConstructor = require('../internals/array-buffer-view-core').aTypedArrayConstructor;\n\nmodule.exports = function from(source /* , mapfn, thisArg */) {\n  var O = toObject(source);\n  var argumentsLength = arguments.length;\n  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;\n  var mapping = mapfn !== undefined;\n  var iteratorMethod = getIteratorMethod(O);\n  var i, length, result, step, iterator, next;\n  if (iteratorMethod != undefined && !isArrayIteratorMethod(iteratorMethod)) {\n    iterator = getIterator(O, iteratorMethod);\n    next = iterator.next;\n    O = [];\n    while (!(step = next.call(iterator)).done) {\n      O.push(step.value);\n    }\n  }\n  if (mapping && argumentsLength > 2) {\n    mapfn = bind(mapfn, arguments[2], 2);\n  }\n  length = toLength(O.length);\n  result = new (aTypedArrayConstructor(this))(length);\n  for (i = 0; length > i; i++) {\n    result[i] = mapping ? mapfn(O[i], i) : O[i];\n  }\n  return result;\n};\n"]},"metadata":{},"sourceType":"script"}