{"ast":null,"code":"'use strict';\n\nvar DESCRIPTORS = require('../internals/descriptors');\n\nvar global = require('../internals/global');\n\nvar isForced = require('../internals/is-forced');\n\nvar redefine = require('../internals/redefine');\n\nvar has = require('../internals/has');\n\nvar classof = require('../internals/classof-raw');\n\nvar inheritIfRequired = require('../internals/inherit-if-required');\n\nvar isSymbol = require('../internals/is-symbol');\n\nvar toPrimitive = require('../internals/to-primitive');\n\nvar fails = require('../internals/fails');\n\nvar create = require('../internals/object-create');\n\nvar getOwnPropertyNames = require('../internals/object-get-own-property-names').f;\n\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\n\nvar defineProperty = require('../internals/object-define-property').f;\n\nvar trim = require('../internals/string-trim').trim;\n\nvar NUMBER = 'Number';\nvar NativeNumber = global[NUMBER];\nvar NumberPrototype = NativeNumber.prototype; // Opera ~12 has broken Object#toString\n\nvar BROKEN_CLASSOF = classof(create(NumberPrototype)) == NUMBER; // `ToNumber` abstract operation\n// https://tc39.es/ecma262/#sec-tonumber\n\nvar toNumber = function toNumber(argument) {\n  if (isSymbol(argument)) throw TypeError('Cannot convert a Symbol value to a number');\n  var it = toPrimitive(argument, 'number');\n  var first, third, radix, maxCode, digits, length, index, code;\n\n  if (typeof it == 'string' && it.length > 2) {\n    it = trim(it);\n    first = it.charCodeAt(0);\n\n    if (first === 43 || first === 45) {\n      third = it.charCodeAt(2);\n      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix\n    } else if (first === 48) {\n      switch (it.charCodeAt(1)) {\n        case 66:\n        case 98:\n          radix = 2;\n          maxCode = 49;\n          break;\n        // fast equal of /^0b[01]+$/i\n\n        case 79:\n        case 111:\n          radix = 8;\n          maxCode = 55;\n          break;\n        // fast equal of /^0o[0-7]+$/i\n\n        default:\n          return +it;\n      }\n\n      digits = it.slice(2);\n      length = digits.length;\n\n      for (index = 0; index < length; index++) {\n        code = digits.charCodeAt(index); // parseInt parses a string to a first unavailable symbol\n        // but ToNumber should return NaN if a string contains unavailable symbols\n\n        if (code < 48 || code > maxCode) return NaN;\n      }\n\n      return parseInt(digits, radix);\n    }\n  }\n\n  return +it;\n}; // `Number` constructor\n// https://tc39.es/ecma262/#sec-number-constructor\n\n\nif (isForced(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {\n  var NumberWrapper = function Number(value) {\n    var it = arguments.length < 1 ? 0 : value;\n    var dummy = this;\n    return dummy instanceof NumberWrapper // check on 1..constructor(foo) case\n    && (BROKEN_CLASSOF ? fails(function () {\n      NumberPrototype.valueOf.call(dummy);\n    }) : classof(dummy) != NUMBER) ? inheritIfRequired(new NativeNumber(toNumber(it)), dummy, NumberWrapper) : toNumber(it);\n  };\n\n  for (var keys = DESCRIPTORS ? getOwnPropertyNames(NativeNumber) : ( // ES3:\n  'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' + // ES2015 (in case, if modules with ES2015 Number statics required before):\n  'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' + 'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger,' + // ESNext\n  'fromString,range').split(','), j = 0, key; keys.length > j; j++) {\n    if (has(NativeNumber, key = keys[j]) && !has(NumberWrapper, key)) {\n      defineProperty(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));\n    }\n  }\n\n  NumberWrapper.prototype = NumberPrototype;\n  NumberPrototype.constructor = NumberWrapper;\n  redefine(global, NUMBER, NumberWrapper);\n}","map":{"version":3,"sources":["/Users/anele.mzinyati/Documents/repos/aem-react-spa-app/ui.frontend/node_modules/core-js/modules/es.number.constructor.js"],"names":["DESCRIPTORS","require","global","isForced","redefine","has","classof","inheritIfRequired","isSymbol","toPrimitive","fails","create","getOwnPropertyNames","f","getOwnPropertyDescriptor","defineProperty","trim","NUMBER","NativeNumber","NumberPrototype","prototype","BROKEN_CLASSOF","toNumber","argument","TypeError","it","first","third","radix","maxCode","digits","length","index","code","charCodeAt","NaN","slice","parseInt","NumberWrapper","Number","value","arguments","dummy","valueOf","call","keys","split","j","key","constructor"],"mappings":"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","sourcesContent":["'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar global = require('../internals/global');\nvar isForced = require('../internals/is-forced');\nvar redefine = require('../internals/redefine');\nvar has = require('../internals/has');\nvar classof = require('../internals/classof-raw');\nvar inheritIfRequired = require('../internals/inherit-if-required');\nvar isSymbol = require('../internals/is-symbol');\nvar toPrimitive = require('../internals/to-primitive');\nvar fails = require('../internals/fails');\nvar create = require('../internals/object-create');\nvar getOwnPropertyNames = require('../internals/object-get-own-property-names').f;\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar defineProperty = require('../internals/object-define-property').f;\nvar trim = require('../internals/string-trim').trim;\n\nvar NUMBER = 'Number';\nvar NativeNumber = global[NUMBER];\nvar NumberPrototype = NativeNumber.prototype;\n\n// Opera ~12 has broken Object#toString\nvar BROKEN_CLASSOF = classof(create(NumberPrototype)) == NUMBER;\n\n// `ToNumber` abstract operation\n// https://tc39.es/ecma262/#sec-tonumber\nvar toNumber = function (argument) {\n  if (isSymbol(argument)) throw TypeError('Cannot convert a Symbol value to a number');\n  var it = toPrimitive(argument, 'number');\n  var first, third, radix, maxCode, digits, length, index, code;\n  if (typeof it == 'string' && it.length > 2) {\n    it = trim(it);\n    first = it.charCodeAt(0);\n    if (first === 43 || first === 45) {\n      third = it.charCodeAt(2);\n      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix\n    } else if (first === 48) {\n      switch (it.charCodeAt(1)) {\n        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal of /^0b[01]+$/i\n        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal of /^0o[0-7]+$/i\n        default: return +it;\n      }\n      digits = it.slice(2);\n      length = digits.length;\n      for (index = 0; index < length; index++) {\n        code = digits.charCodeAt(index);\n        // parseInt parses a string to a first unavailable symbol\n        // but ToNumber should return NaN if a string contains unavailable symbols\n        if (code < 48 || code > maxCode) return NaN;\n      } return parseInt(digits, radix);\n    }\n  } return +it;\n};\n\n// `Number` constructor\n// https://tc39.es/ecma262/#sec-number-constructor\nif (isForced(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {\n  var NumberWrapper = function Number(value) {\n    var it = arguments.length < 1 ? 0 : value;\n    var dummy = this;\n    return dummy instanceof NumberWrapper\n      // check on 1..constructor(foo) case\n      && (BROKEN_CLASSOF ? fails(function () { NumberPrototype.valueOf.call(dummy); }) : classof(dummy) != NUMBER)\n        ? inheritIfRequired(new NativeNumber(toNumber(it)), dummy, NumberWrapper) : toNumber(it);\n  };\n  for (var keys = DESCRIPTORS ? getOwnPropertyNames(NativeNumber) : (\n    // ES3:\n    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +\n    // ES2015 (in case, if modules with ES2015 Number statics required before):\n    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +\n    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger,' +\n    // ESNext\n    'fromString,range'\n  ).split(','), j = 0, key; keys.length > j; j++) {\n    if (has(NativeNumber, key = keys[j]) && !has(NumberWrapper, key)) {\n      defineProperty(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));\n    }\n  }\n  NumberWrapper.prototype = NumberPrototype;\n  NumberPrototype.constructor = NumberWrapper;\n  redefine(global, NUMBER, NumberWrapper);\n}\n"]},"metadata":{},"sourceType":"script"}